import { Component, ElementRef, Injector, OnInit, ViewChild } from '@angular/core'
import { NgForOf, NgIf } from '@angular/common'
import * as JsSIP from 'jssip';
import { FormsModule } from '@angular/forms'
import { MatFormField, MatLabel } from '@angular/material/form-field'
import { MatInput } from '@angular/material/input'
import { MatButton } from '@angular/material/button'

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss'],
  standalone: true,
  imports: [FormsModule, MatFormField, MatInput, MatButton, MatLabel, NgForOf, NgIf]
})
export class DashboardComponent implements OnInit {
  @ViewChild('remoteAudio') remoteAudio!: ElementRef<HTMLAudioElement>
  constructor() {
  }

  ngOnInit(): void {
    // Initialize audio in browser environment
    if (typeof window !== 'undefined') {
      this.initAudio();
    }
  }

  protected componentInit(): void {}

  ua: any
  logs: string[] = []
  session: any
  // √Çm thanh th√¥ng b√°o cu·ªôc g·ªçi ƒë·∫øn
  incomingCallAudio: any;
  incomingCall: boolean = false // Bi·∫øn ki·ªÉm tra cu·ªôc g·ªçi ƒë·∫øn
  // C√°c tham s·ªë l·∫•y t·ª´ UI
  wsUri: string = 'wss://thanhdevapp-4640627891f4.sip.signalwire.com'
  sipUri: string = 'sip:1001@thanhdevapp-4640627891f4.sip.signalwire.com'
  password: string = '1'
  displayName: string = 'Client'
  callTarget: string = 'sip:thanhdevapp2@thanhdevapp-4640627891f4.sip.signalwire.com'

  connectToSipServer(): void {
    JsSIP.debug.enable('JsSIP:*')
    const configuration = {
      sockets: [new JsSIP.WebSocketInterface(this.wsUri)],
      uri: this.sipUri,
      password: this.password,
      display_name: this.displayName,
      session_timers: false
    }

    this.ua = new JsSIP.UA(configuration)

    this.ua.on('connected', () => this.addLog('[SIP] K·∫øt n·ªëi WebSocket th√†nh c√¥ng.'))
    this.ua.on('disconnected', () => this.addLog('[SIP] M·∫•t k·∫øt n·ªëi WebSocket.'))
    this.ua.on('registered', () => this.addLog('[SIP] ƒêƒÉng k√Ω th√†nh c√¥ng.'))
    this.ua.on('registrationFailed', (e) => this.addLog(`[SIP] ƒêƒÉng k√Ω th·∫•t b·∫°i: ${JSON.stringify(e)}`))
    this.ua.on('newRTCSession', (data: any) => this.handleNewSession(data))

    this.ua.start()
    this.addLog('[SIP] ƒêang k·∫øt n·ªëi...')
  }

  makeCall(): void {
    if (!this.ua || !this.ua.isRegistered()) {
      this.addLog('User agent ch∆∞a ƒëƒÉng k√Ω. Kh√¥ng th·ªÉ g·ªçi.')
      return
    }

    const options = {
      mediaConstraints: { audio: true, video: false },
      rtcOfferConstraints: {
        offerToReceiveAudio: true,
        offerToReceiveVideo: false
      },
      pcConfig: {
        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
      }
    }

    this.addLog(`üìû ƒêang g·ªçi ${this.callTarget}...`)
    const session = this.ua.call(this.callTarget, options)

    session.on('progress', () => this.addLog('Cu·ªôc g·ªçi ƒëang ƒë·ªï chu√¥ng...'))
    session.on('accepted', () => this.addLog('Cu·ªôc g·ªçi ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n.'))
    session.on('confirmed', () => this.addLog('Cu·ªôc g·ªçi ƒëang di·ªÖn ra...'))
    session.on('ended', (e: any) => this.addLog(`Cu·ªôc g·ªçi k·∫øt th√∫c. L√Ω do: ${e.cause}`))
    session.on('failed', (e: any) => this.addLog(`Cu·ªôc g·ªçi th·∫•t b·∫°i: ${e.cause}. Chi ti·∫øt: ${JSON.stringify(e)}`))
  }

  private handleNewSession(data: any): void {
    this.session = data.session

    this.addLog('[SIP] üìû Cu·ªôc g·ªçi m·ªõi b·∫Øt ƒë·∫ßu.')
    this.incomingCall = this.session.direction === 'incoming'
    if (this.session.direction === 'incoming') {
      const caller = this.session.remote_identity.uri.toString()
      this.addLog(`[SIP] üì≤ Cu·ªôc g·ªçi ƒë·∫øn t·ª´: ${caller}`)
      // Ph√°t √¢m thanh cu·ªôc g·ªçi ƒë·∫øn
      this.playRingtone()
    }

    this.session.on('accepted', () => this.addLog('[SIP] Cu·ªôc g·ªçi ƒë∆∞·ª£c ch·∫•p nh·∫≠n.'))
    this.session.on('confirmed', () => this.addLog('[SIP] Cu·ªôc g·ªçi ƒëang di·ªÖn ra...'))
    this.session.on('ended', (e: any) => {
      this.addLog(`[SIP] Cu·ªôc g·ªçi k·∫øt th√∫c. L√Ω do: ${e.cause}`)
      this.incomingCall = false;
      this.stopRingtone();
      this.remoteAudio.nativeElement.pause()
    })
    this.session.on('failed', (e: any) => {
      this.addLog(`[SIP] Cu·ªôc g·ªçi th·∫•t b·∫°i. L√Ω do: ${e.cause}. Chi ti·∫øt: ${JSON.stringify(e)}`)
      this.incomingCallAudio.pause()
      this.remoteAudio.nativeElement.pause()
    })
  }

  private addLog(message: string): void {
    const timestamp = new Date().toLocaleTimeString()
    const logMessage = `[${timestamp}] ${message}`
    this.logs.push(logMessage)
    console.log(logMessage)
  }

  clearLog() {
    this.logs = []
  }


  answerCall2() {
    if (this.session.direction === 'incoming') {
      this.session.answer({
        mediaConstraints: { audio: true, video: false },
        rtcAnswerConstraints: {
          offerToReceiveAudio: true,
          offerToReceiveVideo: false
        },
        pcConfig: {
          iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
        }
      });
      this.addLog('[SIP] ƒê√£ t·ª± ƒë·ªông tr·∫£ l·ªùi cu·ªôc g·ªçi.');

      // L·∫•y lu·ªìng √¢m thanh v√† ph√°t qua remoteAudio
      this.session.connection.addEventListener('track', (event: any) => {
        this.remoteAudio.nativeElement.srcObject = event.streams[0];
        this.remoteAudio.nativeElement.play();
      });
    }
  }

  answerCall() {
    if (!this.session) return;

    this.incomingCall = false; // ·∫®n n√∫t tr·∫£ l·ªùi
    this.stopRingtone(); // D·ª´ng nh·∫°c chu√¥ng

    // L·∫•y quy·ªÅn truy c·∫≠p micro
    navigator.mediaDevices.getUserMedia({ audio: true })
      .then((stream) => {
        this.answerCall2()
      })
      .catch((error) => {
        console.error('L·ªói l·∫•y micro:', error);
        this.addLog('Kh√¥ng th·ªÉ truy c·∫≠p micro');
        if (this.session) this.session.terminate(); // H·ªßy cu·ªôc g·ªçi n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c micro
      });
  }


  private initAudio(): void {
    // Create audio object only in browser environment
    this.incomingCallAudio = new window.Audio('assets/sounds/incoming-call-ringtone.mp3');
  }

  private playRingtone(): void {
    if (this.incomingCallAudio) {
      // this.incomingCallAudio.loop = true;
      // this.incomingCallAudio.play().catch(() => console.log('Kh√¥ng th·ªÉ ph√°t nh·∫°c chu√¥ng'));
    }
  }

  private stopRingtone(): void {
    if (this.incomingCallAudio) {
      this.incomingCallAudio.pause();
      this.incomingCallAudio.currentTime = 0;
    }
  }

  endCall() {
    if (!this.session) {
      this.addLog("Kh√¥ng c√≥ cu·ªôc g·ªçi n√†o ƒë·ªÉ k·∫øt th√∫c.");
      return;
    }

    try {
      // D·ª´ng t·∫•t c·∫£ c√°c track c·ªßa local stream (microphone)
      if (this.session.connection) {
        this.session.connection.getSenders().forEach((sender: any) => {
          if (sender.track) sender.track.stop();
        });

        this.session.connection.getReceivers().forEach((receiver: any) => {
          if (receiver.track) receiver.track.stop();
        });
      }

      // D·ª´ng ph√°t √¢m thanh
      if (this.remoteAudio && this.remoteAudio.nativeElement.srcObject) {
        const stream = this.remoteAudio.nativeElement.srcObject as MediaStream;
        stream.getTracks().forEach(track => track.stop());
        this.remoteAudio.nativeElement.srcObject = null;
      }

      // H·ªßy cu·ªôc g·ªçi tr√™n SIP.js
      this.session.terminate();

      // ƒê·∫∑t l·∫°i bi·∫øn tr·∫°ng th√°i
      this.session = null;
      this.incomingCall = false;
      this.addLog("üìû Cu·ªôc g·ªçi ƒë√£ k·∫øt th√∫c.");
    } catch (error) {
      console.error("L·ªói khi k·∫øt th√∫c cu·ªôc g·ªçi:", error);
      this.addLog("L·ªói khi k·∫øt th√∫c cu·ªôc g·ªçi.");
    }
  }

}
